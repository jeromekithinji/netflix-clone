{"ast":null,"code":"var _jsxFileName = \"/Users/jeromekithinji/Development/netflix-clone/src/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https:image.tmdb.org/t/p/original/\";\nconst Row = ({\n  title,\n  fetchUrl,\n  isLargeRow,\n  trailerUrl\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(fetchUrl);\n      setMovies(response.data.results);\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1 // Auto play videos when the page loads\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      //movie trailer is an npm package which looks for the trailer given the name \n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v')); // this gets the parameter 'v' from the youtube URL which has the video ID which will identify the video\n      }).catch(error => console.log(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","Youtube","movieTrailer","jsxDEV","_jsxDEV","base_url","Row","title","fetchUrl","isLargeRow","trailerUrl","_s","movies","setMovies","fetchData","response","get","data","results","error","console","log","opts","height","width","playerVars","autoplay","handleClick","movie","setTrailerUrl","name","then","url","urlParams","URLSearchParams","URL","search","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","poster_path","backdrop_path","alt","id","videoId","_c","$RefreshReg$"],"sources":["/Users/jeromekithinji/Development/netflix-clone/src/Row.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\"\n\nconst base_url = \"https:image.tmdb.org/t/p/original/\";\n\nconst Row = ({ title, fetchUrl, isLargeRow, trailerUrl }) => {\n    const [movies, setMovies] = useState([]);\n\n    const fetchData = async () => {\n        try {\n            const response = await axios.get(fetchUrl);\n            setMovies(response.data.results);\n            return response;\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1, // Auto play videos when the page loads\n        }\n    }\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            //movie trailer is an npm package which looks for the trailer given the name \n            movieTrailer(movie?.name || \"\")\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search)\n                setTrailerUrl(urlParams.get('v')); // this gets the parameter 'v' from the youtube URL which has the video ID which will identify the video\n            })\n            .catch(error => console.log(error)); \n        }\n    }\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row__posters\">\n                {movies.map((movie) => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        src={`${base_url}${isLargeRow ?movie.poster_path: movie.backdrop_path}`}\n                        alt={movie.name}\n                    />\n                ))}\n            </div>\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\n        </div>\n    );\n};\n\nexport default Row;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}